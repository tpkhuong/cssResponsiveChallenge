@import url("https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@300;400;600&display=swap");

:root {
  --clr-primary-red: hsl(0, 36%, 70%);
  --clr-secondary-red: hsl(0, 93%, 68%);
  --clr-neutral-red: hsl(0, 6%, 24%);

  --clr-linear-grad: 135deg, hsl(0, 0%, 100%), hsl(0, 100%, 98%);
  --clr-linear-secondary-grad: 135deg, hsl(0, 80%, 86%), hsl(0, 74%, 74%);
  --ff-Josefin: "Josefin Sans";

  --fs-200: 0.9375rem;
  --fs-300: 1rem;
  --fs-400: 1.25rem;
  --fs-500: 1.5rem;
  --fs-600: 1.75rem;
  --fs-700: 2rem;

  --fw-200: 200;
  --fw-400: 400;
  --fw-500: 500;

  --spacer-xxs: 0.5rem;
  --spacer-xs: 0.8rem;
  --spacer-s: 1rem;
  --spacer-m: 1.5rem;
  --spacer-l: 2rem;
}

/* reset */

*,
*::before,
*::after {
  box-sizing: border-box;
}

h1,
h2,
h3,
h4,
p,
body {
  margin: 0;
  /* figure, dl, and dd have default margin */
  /* font-weight: 100; */
}

h1,
h2,
h3,
h4 {
  line-height: 1;
}

p {
  line-height: 1.4;
  font-size: var(--fs-400);
}

a {
  text-decoration: none;
  color: var(--link-fg, var(--clr-neutral-900));
  font-weight: var(--fw-700);
  font-size: var(--fs-300);
}

img {
  /* using object-fit for images. we have to set a height or a min-height on the image and the width of 100% 
  exception to the rule of setting a height. we can sometime use it on a child element.
  */
  max-width: 100%;
  /* we use max-width: 100% so when we have an img element inside of a div and we want to use flex which means the div will be a flex item
    the img will shrink and grow as its parent element shrink and grows
    */
  display: block;
  height: auto;
}

/* ul[class],
li[class] {
  list-style: none;
  padding: 0;
} */

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
  color: inherit;
}

/* Remove all animations and transitions for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

body {
  line-height: 1.5;
  font-family: var(--ff-Josefin);
}

button {
  background-color: transparent;
  border: none;
}

button:focus {
  outline: 0.2em solid hsl(216, 94%, 73%);
  outline-offset: 0.2em;
  border-radius: 0.2em;
}

input {
  border: 0.1px solid;
}

/* reset */

/* utilities */

.columns {
  display: flex;
  flex-flow: column;
}

.columns > * {
  flex-basis: 100%;
}

.columns > * + * {
  margin: var(--gap, 1rem) 0 0 0;
}

[class*="col-"] {
  flex-basis: var(--percent-col, 100%);
}

.col-1 {
  --percent-col: 25%;
}
.col-2 {
  --percent-col: 50%;
}
.col-3 {
  --percent-col: 75%;
}

.flow-content > * + * {
  margin: var(--flow-gap, 1em) 0 0 0;
}

[class*="bg-"] {
  background-color: var(--bg, #fff);
  color: var(--fg, #000);
}

.bg-light {
}

.bg-dark {
}

.bg-accent {
}

/* hide h2 which are title for our section element */
.visually-hidden:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

input,
.wrapper {
  border-radius: 0.2rem;
}

.accordion-form {
  display: flex;
  flex-flow: column;
  min-height: 100vh;
}

.wrapper {
  min-width: 20em;
  border: 2px solid hsl(0, 0%, 82%);
  margin: auto;
}

input:focus {
  outline: 2px solid hsl(0, 0%, 0%);
  outline-offset: 0.2em;
  /* border: 2px solid #000; */
}

/* .wrapper:focus-within {
  border: 2px dashed blue;
} */

.focus-ring {
  border-color: hsl(216, 94%, 73%);
}

/* focus ring on container */

.focus {
  border: 2px solid hsl(216, 94%, 73%);
}

/* individual sections */

.toggle-btn {
  text-align: left;
  font-weight: 300;
}

.btn-content {
  font-size: 1rem;
  position: relative;
}

/* use outline: offset to separate the outline from the border */

/* accordion icon */

.accordion-icon {
  border: solid hsl(216, 94%, 73%);
  border-width: 0 2px 2px 0;
  /* without the position: absolute declaration, our icon will be a line */
  position: absolute;
  transform: rotate(45deg);
  top: 0.1rem;
  left: 14em;
  margin: 0 0 0 auto;
  height: 0.5rem;
  width: 0.5rem;
}

/* h3 button */

/* btn border */

.toggle-heading {
  padding: 1.3em 1.5em;
}

.toggle-heading:hover {
  background-color: hsl(216, 94%, 94%);
}

article:nth-of-type(1) h3 {
  /* border-bottom: 1px solid lightslategray; */
}

article:nth-of-type(2) h3 {
  border-top: 1px solid lightslategray;
}

article:nth-of-type(3) h3 {
  border-top: 1px solid lightslategray;
}

[class*="-btn"] {
  /* display: inline-block; */
  min-width: 100%;
}

.toggle-heading[aria-expanded="true"] {
  border-bottom: 1px solid lightslategray;
}

h3[aria-expanded="true"] .accordion-icon {
  transform: rotate(-135deg);
}

/* show/hide content */

h3[aria-expanded="true"] ~ .content-container {
  display: flex;
}

h3[aria-expanded="false"] ~ .content-container {
  display: none;
}

/* show/hide content */

/* content section */

.content-container {
  display: flex;
  flex-flow: column;
  padding: 2.5em 1.5em;
}

input:not(:last-of-type) {
  margin: 0 0 0.8em 0;
}

.content-container input {
  max-width: 14rem;
}
